# Continuous Integration
name: CI

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
    paths-ignore:
      - '.vscode/**'
      - '.gitignore'
      - 'LICENSE'
      - '**.md'
    branches:
      - master

  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - '**'

env:
  NODE_VERSION: 12

jobs:
  build-and-test:
    name: Build and test
    if: ${{ !contains(toJSON(github.event.head_commit.message), 'published release :rocket:') }}
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository
      - name: Checkout code
        uses: actions/checkout@v2

      - name: echo github.ref
        run: echo ${{ github.ref }}

      # Setup Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Get yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      # Retrieve cached dependencies
      - name: Retrieve cached dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install package dependencies
      - name: Install dependencies
        run: yarn install --immutable

      # Ensure package build successfully
      - name: Ensure package build successfully
        run: yarn build

      # Check linting succeeds
      - name: Check linting succeeds
        run: yarn lint:fix

      # Check for code changes
      - name: Check for code changes
        run: yarn check:clean-diff-after-install

  publish-version:
    name: Publish release
    if: ${{ github.ref == 'refs/heads/master' && !contains(toJSON(github.event.head_commit.message), 'published release :rocket:') }}
    needs: [build-and-test]
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository
      - name: Checkout code
        uses: actions/checkout@v2

      - name: echo github.ref
        run: echo ${{ github.ref }}

      # Setup Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      # Get yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      # Retrieve cached dependencies
      - name: Retrieve cached dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install package dependencies
      - name: Install dependencies
        run: yarn install --immutable

      # Ensure package build successfully
      - name: Ensure package build successfully
        run: yarn build

      # Configure GitHub config - required for github release to work
      - name: Configure GitHub config
        run: |
          git config user.name '${{ secrets.GH_USERNAME }}'
          git config user.email '${{ secrets.GH_EMAIL }}'

      # Verify head of master hasn't changed
      - name: Verify head of master hasn't changed
        run: |
          # We ensure that the latest commit on master is still the one we expected when
          # we started the release job, otherwise we exit
          if [ "$GITHUB_SHA" != "$(git rev-parse --verify HEAD)" ]; then
              echo "ERROR: The commit SHA at the HEAD of master has changed"
              echo "Expected: $GITHUB_SHA"
              echo "Actual: $(git rev-parse --verify HEAD)"
              exit 1;
          fi

      # Bump the package version
      - name: Bump the package version
        run: |
          npm version patch -m "Chore: published release :rocket: %s"

      # Push the bumped version back to GitHub
      - name: Push the bumped version back to GitHub
        run: git push --follow-tags

      # Publish the package
      - name: Publish the package
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
